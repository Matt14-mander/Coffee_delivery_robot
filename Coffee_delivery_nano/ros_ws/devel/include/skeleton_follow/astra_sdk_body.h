// Generated by gencpp from file skeleton_follow/astra_sdk_body.msg
// DO NOT EDIT!


#ifndef SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODY_H
#define SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skeleton_follow/astra_sdk_vector3f.h>
#include <skeleton_follow/astra_sdk_joint.h>

namespace skeleton_follow
{
template <class ContainerAllocator>
struct astra_sdk_body_
{
  typedef astra_sdk_body_<ContainerAllocator> Type;

  astra_sdk_body_()
    : bodyid(0)
    , centerOfMass()
    , joints()  {
    }
  astra_sdk_body_(const ContainerAllocator& _alloc)
    : bodyid(0)
    , centerOfMass(_alloc)
    , joints()  {
  (void)_alloc;
      joints.assign( ::skeleton_follow::astra_sdk_joint_<ContainerAllocator> (_alloc));
  }



   typedef int16_t _bodyid_type;
  _bodyid_type bodyid;

   typedef  ::skeleton_follow::astra_sdk_vector3f_<ContainerAllocator>  _centerOfMass_type;
  _centerOfMass_type centerOfMass;

   typedef boost::array< ::skeleton_follow::astra_sdk_joint_<ContainerAllocator> , 19>  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> const> ConstPtr;

}; // struct astra_sdk_body_

typedef ::skeleton_follow::astra_sdk_body_<std::allocator<void> > astra_sdk_body;

typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_body > astra_sdk_bodyPtr;
typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_body const> astra_sdk_bodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skeleton_follow::astra_sdk_body_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skeleton_follow::astra_sdk_body_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_body_<ContainerAllocator2> & rhs)
{
  return lhs.bodyid == rhs.bodyid &&
    lhs.centerOfMass == rhs.centerOfMass &&
    lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skeleton_follow::astra_sdk_body_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_body_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skeleton_follow

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57f2da357721aaca7548e8de3d97f76a";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_body_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57f2da357721aacaULL;
  static const uint64_t static_value2 = 0x7548e8de3d97f76aULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skeleton_follow/astra_sdk_body";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_body_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 bodyid\n"
"astra_sdk_vector3f centerOfMass\n"
"astra_sdk_joint[19] joints\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_vector3f\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_joint\n"
"int8 type\n"
"astra_sdk_vector2f depthPosition\n"
"astra_sdk_vector3f worldPosition\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_vector2f\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::skeleton_follow::astra_sdk_body_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bodyid);
      stream.next(m.centerOfMass);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct astra_sdk_body_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skeleton_follow::astra_sdk_body_<ContainerAllocator>& v)
  {
    s << indent << "bodyid: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bodyid);
    s << indent << "centerOfMass: ";
    s << std::endl;
    Printer< ::skeleton_follow::astra_sdk_vector3f_<ContainerAllocator> >::stream(s, indent + "  ", v.centerOfMass);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skeleton_follow::astra_sdk_joint_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODY_H
