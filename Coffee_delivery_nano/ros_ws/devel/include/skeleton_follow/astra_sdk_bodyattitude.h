// Generated by gencpp from file skeleton_follow/astra_sdk_bodyattitude.msg
// DO NOT EDIT!


#ifndef SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYATTITUDE_H
#define SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYATTITUDE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skeleton_follow
{
template <class ContainerAllocator>
struct astra_sdk_bodyattitude_
{
  typedef astra_sdk_bodyattitude_<ContainerAllocator> Type;

  astra_sdk_bodyattitude_()
    : bodyid(0)
    , CenterOfMass_X(0.0)
    , CenterOfMass_Y(0.0)
    , CenterOfMass_Z(0.0)
    , left_arm_out(0)
    , right_arm_out(0)
    , left_hand_raised(0)
    , right_hand_raised(0)
    , akimibo(0)
    , left_foot_up(0)
    , right_foot_up(0)
    , fall(0)
    , tips(0)
    , lock_status(0)  {
    }
  astra_sdk_bodyattitude_(const ContainerAllocator& _alloc)
    : bodyid(0)
    , CenterOfMass_X(0.0)
    , CenterOfMass_Y(0.0)
    , CenterOfMass_Z(0.0)
    , left_arm_out(0)
    , right_arm_out(0)
    , left_hand_raised(0)
    , right_hand_raised(0)
    , akimibo(0)
    , left_foot_up(0)
    , right_foot_up(0)
    , fall(0)
    , tips(0)
    , lock_status(0)  {
  (void)_alloc;
    }



   typedef int16_t _bodyid_type;
  _bodyid_type bodyid;

   typedef float _CenterOfMass_X_type;
  _CenterOfMass_X_type CenterOfMass_X;

   typedef float _CenterOfMass_Y_type;
  _CenterOfMass_Y_type CenterOfMass_Y;

   typedef float _CenterOfMass_Z_type;
  _CenterOfMass_Z_type CenterOfMass_Z;

   typedef int8_t _left_arm_out_type;
  _left_arm_out_type left_arm_out;

   typedef int8_t _right_arm_out_type;
  _right_arm_out_type right_arm_out;

   typedef int8_t _left_hand_raised_type;
  _left_hand_raised_type left_hand_raised;

   typedef int8_t _right_hand_raised_type;
  _right_hand_raised_type right_hand_raised;

   typedef int8_t _akimibo_type;
  _akimibo_type akimibo;

   typedef int8_t _left_foot_up_type;
  _left_foot_up_type left_foot_up;

   typedef int8_t _right_foot_up_type;
  _right_foot_up_type right_foot_up;

   typedef int8_t _fall_type;
  _fall_type fall;

   typedef int8_t _tips_type;
  _tips_type tips;

   typedef int8_t _lock_status_type;
  _lock_status_type lock_status;





  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> const> ConstPtr;

}; // struct astra_sdk_bodyattitude_

typedef ::skeleton_follow::astra_sdk_bodyattitude_<std::allocator<void> > astra_sdk_bodyattitude;

typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodyattitude > astra_sdk_bodyattitudePtr;
typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodyattitude const> astra_sdk_bodyattitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator2> & rhs)
{
  return lhs.bodyid == rhs.bodyid &&
    lhs.CenterOfMass_X == rhs.CenterOfMass_X &&
    lhs.CenterOfMass_Y == rhs.CenterOfMass_Y &&
    lhs.CenterOfMass_Z == rhs.CenterOfMass_Z &&
    lhs.left_arm_out == rhs.left_arm_out &&
    lhs.right_arm_out == rhs.right_arm_out &&
    lhs.left_hand_raised == rhs.left_hand_raised &&
    lhs.right_hand_raised == rhs.right_hand_raised &&
    lhs.akimibo == rhs.akimibo &&
    lhs.left_foot_up == rhs.left_foot_up &&
    lhs.right_foot_up == rhs.right_foot_up &&
    lhs.fall == rhs.fall &&
    lhs.tips == rhs.tips &&
    lhs.lock_status == rhs.lock_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skeleton_follow

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb21bd82e96aab6d386d23fcd631b859";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb21bd82e96aab6dULL;
  static const uint64_t static_value2 = 0x386d23fcd631b859ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skeleton_follow/astra_sdk_bodyattitude";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 bodyid\n"
"float32 CenterOfMass_X\n"
"float32 CenterOfMass_Y\n"
"float32 CenterOfMass_Z\n"
"int8 left_arm_out\n"
"int8 right_arm_out\n"
"int8 left_hand_raised\n"
"int8 right_hand_raised\n"
"int8 akimibo\n"
"int8 left_foot_up\n"
"int8 right_foot_up\n"
"int8 fall\n"
"int8 tips\n"
"int8 lock_status\n"
;
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bodyid);
      stream.next(m.CenterOfMass_X);
      stream.next(m.CenterOfMass_Y);
      stream.next(m.CenterOfMass_Z);
      stream.next(m.left_arm_out);
      stream.next(m.right_arm_out);
      stream.next(m.left_hand_raised);
      stream.next(m.right_hand_raised);
      stream.next(m.akimibo);
      stream.next(m.left_foot_up);
      stream.next(m.right_foot_up);
      stream.next(m.fall);
      stream.next(m.tips);
      stream.next(m.lock_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct astra_sdk_bodyattitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skeleton_follow::astra_sdk_bodyattitude_<ContainerAllocator>& v)
  {
    s << indent << "bodyid: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bodyid);
    s << indent << "CenterOfMass_X: ";
    Printer<float>::stream(s, indent + "  ", v.CenterOfMass_X);
    s << indent << "CenterOfMass_Y: ";
    Printer<float>::stream(s, indent + "  ", v.CenterOfMass_Y);
    s << indent << "CenterOfMass_Z: ";
    Printer<float>::stream(s, indent + "  ", v.CenterOfMass_Z);
    s << indent << "left_arm_out: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_arm_out);
    s << indent << "right_arm_out: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_arm_out);
    s << indent << "left_hand_raised: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_hand_raised);
    s << indent << "right_hand_raised: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_hand_raised);
    s << indent << "akimibo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.akimibo);
    s << indent << "left_foot_up: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_foot_up);
    s << indent << "right_foot_up: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_foot_up);
    s << indent << "fall: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fall);
    s << indent << "tips: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tips);
    s << indent << "lock_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lock_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYATTITUDE_H
