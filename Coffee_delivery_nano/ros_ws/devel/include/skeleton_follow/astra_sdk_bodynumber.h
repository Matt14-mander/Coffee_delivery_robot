// Generated by gencpp from file skeleton_follow/astra_sdk_bodynumber.msg
// DO NOT EDIT!


#ifndef SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYNUMBER_H
#define SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYNUMBER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <skeleton_follow/astra_sdk_body.h>

namespace skeleton_follow
{
template <class ContainerAllocator>
struct astra_sdk_bodynumber_
{
  typedef astra_sdk_bodynumber_<ContainerAllocator> Type;

  astra_sdk_bodynumber_()
    : count(0)
    , bodies()  {
    }
  astra_sdk_bodynumber_(const ContainerAllocator& _alloc)
    : count(0)
    , bodies()  {
  (void)_alloc;
      bodies.assign( ::skeleton_follow::astra_sdk_body_<ContainerAllocator> (_alloc));
  }



   typedef int8_t _count_type;
  _count_type count;

   typedef boost::array< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> , 6>  _bodies_type;
  _bodies_type bodies;





  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> const> ConstPtr;

}; // struct astra_sdk_bodynumber_

typedef ::skeleton_follow::astra_sdk_bodynumber_<std::allocator<void> > astra_sdk_bodynumber;

typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodynumber > astra_sdk_bodynumberPtr;
typedef boost::shared_ptr< ::skeleton_follow::astra_sdk_bodynumber const> astra_sdk_bodynumberConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count &&
    lhs.bodies == rhs.bodies;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator1> & lhs, const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace skeleton_follow

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1b1dea345dbea1f84926cdcaf9c5b80";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1b1dea345dbea1fULL;
  static const uint64_t static_value2 = 0x84926cdcaf9c5b80ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skeleton_follow/astra_sdk_bodynumber";
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 count\n"
"astra_sdk_body[6] bodies\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_body\n"
"int16 bodyid\n"
"astra_sdk_vector3f centerOfMass\n"
"astra_sdk_joint[19] joints\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_vector3f\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_joint\n"
"int8 type\n"
"astra_sdk_vector2f depthPosition\n"
"astra_sdk_vector3f worldPosition\n"
"================================================================================\n"
"MSG: skeleton_follow/astra_sdk_vector2f\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
      stream.next(m.bodies);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct astra_sdk_bodynumber_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skeleton_follow::astra_sdk_bodynumber_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<int8_t>::stream(s, indent + "  ", v.count);
    s << indent << "bodies[]" << std::endl;
    for (size_t i = 0; i < v.bodies.size(); ++i)
    {
      s << indent << "  bodies[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skeleton_follow::astra_sdk_body_<ContainerAllocator> >::stream(s, indent + "    ", v.bodies[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKELETON_FOLLOW_MESSAGE_ASTRA_SDK_BODYNUMBER_H
