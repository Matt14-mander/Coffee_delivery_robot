// Generated by gencpp from file tarkbot_robot/Light_SetRequest.msg
// DO NOT EDIT!


#ifndef TARKBOT_ROBOT_MESSAGE_LIGHT_SETREQUEST_H
#define TARKBOT_ROBOT_MESSAGE_LIGHT_SETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tarkbot_robot
{
template <class ContainerAllocator>
struct Light_SetRequest_
{
  typedef Light_SetRequest_<ContainerAllocator> Type;

  Light_SetRequest_()
    : RGB_M_(0)
    , RGB_S_(0)
    , RGB_T_(0)
    , RGB_R_(0)
    , RGB_G_(0)
    , RGB_B_(0)  {
    }
  Light_SetRequest_(const ContainerAllocator& _alloc)
    : RGB_M_(0)
    , RGB_S_(0)
    , RGB_T_(0)
    , RGB_R_(0)
    , RGB_G_(0)
    , RGB_B_(0)  {
  (void)_alloc;
    }



   typedef int8_t _RGB_M__type;
  _RGB_M__type RGB_M_;

   typedef int8_t _RGB_S__type;
  _RGB_S__type RGB_S_;

   typedef uint8_t _RGB_T__type;
  _RGB_T__type RGB_T_;

   typedef uint8_t _RGB_R__type;
  _RGB_R__type RGB_R_;

   typedef uint8_t _RGB_G__type;
  _RGB_G__type RGB_G_;

   typedef uint8_t _RGB_B__type;
  _RGB_B__type RGB_B_;





  typedef boost::shared_ptr< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Light_SetRequest_

typedef ::tarkbot_robot::Light_SetRequest_<std::allocator<void> > Light_SetRequest;

typedef boost::shared_ptr< ::tarkbot_robot::Light_SetRequest > Light_SetRequestPtr;
typedef boost::shared_ptr< ::tarkbot_robot::Light_SetRequest const> Light_SetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator1> & lhs, const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.RGB_M_ == rhs.RGB_M_ &&
    lhs.RGB_S_ == rhs.RGB_S_ &&
    lhs.RGB_T_ == rhs.RGB_T_ &&
    lhs.RGB_R_ == rhs.RGB_R_ &&
    lhs.RGB_G_ == rhs.RGB_G_ &&
    lhs.RGB_B_ == rhs.RGB_B_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator1> & lhs, const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tarkbot_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d6e56e47207f4868318d90325077bb5";
  }

  static const char* value(const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d6e56e47207f486ULL;
  static const uint64_t static_value2 = 0x8318d90325077bb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tarkbot_robot/Light_SetRequest";
  }

  static const char* value(const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 客户端请求时发送的四个数字\n"
"int8 RGB_M_\n"
"int8 RGB_S_\n"
"uint8 RGB_T_\n"
"uint8 RGB_R_\n"
"uint8 RGB_G_\n"
"uint8 RGB_B_\n"
;
  }

  static const char* value(const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RGB_M_);
      stream.next(m.RGB_S_);
      stream.next(m.RGB_T_);
      stream.next(m.RGB_R_);
      stream.next(m.RGB_G_);
      stream.next(m.RGB_B_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Light_SetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tarkbot_robot::Light_SetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tarkbot_robot::Light_SetRequest_<ContainerAllocator>& v)
  {
    s << indent << "RGB_M_: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RGB_M_);
    s << indent << "RGB_S_: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RGB_S_);
    s << indent << "RGB_T_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RGB_T_);
    s << indent << "RGB_R_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RGB_R_);
    s << indent << "RGB_G_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RGB_G_);
    s << indent << "RGB_B_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RGB_B_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TARKBOT_ROBOT_MESSAGE_LIGHT_SETREQUEST_H
