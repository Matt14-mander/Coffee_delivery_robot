// Generated by gencpp from file tarkbot_yolov5/Image_Data.msg
// DO NOT EDIT!


#ifndef TARKBOT_YOLOV5_MESSAGE_IMAGE_DATA_H
#define TARKBOT_YOLOV5_MESSAGE_IMAGE_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tarkbot_yolov5
{
template <class ContainerAllocator>
struct Image_Data_
{
  typedef Image_Data_<ContainerAllocator> Type;

  Image_Data_()
    : height(0)
    , width(0)
    , channels(0)
    , data()  {
    }
  Image_Data_(const ContainerAllocator& _alloc)
    : height(0)
    , width(0)
    , channels(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _channels_type;
  _channels_type channels;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> const> ConstPtr;

}; // struct Image_Data_

typedef ::tarkbot_yolov5::Image_Data_<std::allocator<void> > Image_Data;

typedef boost::shared_ptr< ::tarkbot_yolov5::Image_Data > Image_DataPtr;
typedef boost::shared_ptr< ::tarkbot_yolov5::Image_Data const> Image_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tarkbot_yolov5::Image_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tarkbot_yolov5::Image_Data_<ContainerAllocator1> & lhs, const ::tarkbot_yolov5::Image_Data_<ContainerAllocator2> & rhs)
{
  return lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.channels == rhs.channels &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tarkbot_yolov5::Image_Data_<ContainerAllocator1> & lhs, const ::tarkbot_yolov5::Image_Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tarkbot_yolov5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33648d31a5c2999db4993f94515b68ee";
  }

  static const char* value(const ::tarkbot_yolov5::Image_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33648d31a5c2999dULL;
  static const uint64_t static_value2 = 0xb4993f94515b68eeULL;
};

template<class ContainerAllocator>
struct DataType< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tarkbot_yolov5/Image_Data";
  }

  static const char* value(const ::tarkbot_yolov5::Image_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 height\n"
"int32 width\n"
"int32 channels\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::tarkbot_yolov5::Image_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.channels);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Image_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tarkbot_yolov5::Image_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tarkbot_yolov5::Image_Data_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "channels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channels);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TARKBOT_YOLOV5_MESSAGE_IMAGE_DATA_H
