// Generated by gencpp from file tarkbot_yolov5/Object.msg
// DO NOT EDIT!


#ifndef TARKBOT_YOLOV5_MESSAGE_OBJECT_H
#define TARKBOT_YOLOV5_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tarkbot_yolov5
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : frame_id()
    , stamp()
    , scores(0.0)
    , ptx(0.0)
    , pty(0.0)
    , distw(0.0)
    , disth(0.0)
    , centerx(0.0)
    , centery(0.0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , stamp()
    , scores(0.0)
    , ptx(0.0)
    , pty(0.0)
    , distw(0.0)
    , disth(0.0)
    , centerx(0.0)
    , centery(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _scores_type;
  _scores_type scores;

   typedef float _ptx_type;
  _ptx_type ptx;

   typedef float _pty_type;
  _pty_type pty;

   typedef float _distw_type;
  _distw_type distw;

   typedef float _disth_type;
  _disth_type disth;

   typedef float _centerx_type;
  _centerx_type centerx;

   typedef float _centery_type;
  _centery_type centery;





  typedef boost::shared_ptr< ::tarkbot_yolov5::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tarkbot_yolov5::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::tarkbot_yolov5::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::tarkbot_yolov5::Object > ObjectPtr;
typedef boost::shared_ptr< ::tarkbot_yolov5::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tarkbot_yolov5::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tarkbot_yolov5::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tarkbot_yolov5::Object_<ContainerAllocator1> & lhs, const ::tarkbot_yolov5::Object_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.stamp == rhs.stamp &&
    lhs.scores == rhs.scores &&
    lhs.ptx == rhs.ptx &&
    lhs.pty == rhs.pty &&
    lhs.distw == rhs.distw &&
    lhs.disth == rhs.disth &&
    lhs.centerx == rhs.centerx &&
    lhs.centery == rhs.centery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tarkbot_yolov5::Object_<ContainerAllocator1> & lhs, const ::tarkbot_yolov5::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tarkbot_yolov5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_yolov5::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tarkbot_yolov5::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_yolov5::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tarkbot_yolov5::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_yolov5::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tarkbot_yolov5::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tarkbot_yolov5::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed563213df8d0c63d0090b5a0b306f53";
  }

  static const char* value(const ::tarkbot_yolov5::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed563213df8d0c63ULL;
  static const uint64_t static_value2 = 0xd0090b5a0b306f53ULL;
};

template<class ContainerAllocator>
struct DataType< ::tarkbot_yolov5::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tarkbot_yolov5/Object";
  }

  static const char* value(const ::tarkbot_yolov5::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tarkbot_yolov5::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"time stamp\n"
"float32 scores\n"
"float32 ptx\n"
"float32 pty\n"
"float32 distw\n"
"float32 disth\n"
"float32 centerx\n"
"float32 centery\n"
;
  }

  static const char* value(const ::tarkbot_yolov5::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tarkbot_yolov5::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.stamp);
      stream.next(m.scores);
      stream.next(m.ptx);
      stream.next(m.pty);
      stream.next(m.distw);
      stream.next(m.disth);
      stream.next(m.centerx);
      stream.next(m.centery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tarkbot_yolov5::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tarkbot_yolov5::Object_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "scores: ";
    Printer<float>::stream(s, indent + "  ", v.scores);
    s << indent << "ptx: ";
    Printer<float>::stream(s, indent + "  ", v.ptx);
    s << indent << "pty: ";
    Printer<float>::stream(s, indent + "  ", v.pty);
    s << indent << "distw: ";
    Printer<float>::stream(s, indent + "  ", v.distw);
    s << indent << "disth: ";
    Printer<float>::stream(s, indent + "  ", v.disth);
    s << indent << "centerx: ";
    Printer<float>::stream(s, indent + "  ", v.centerx);
    s << indent << "centery: ";
    Printer<float>::stream(s, indent + "  ", v.centery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TARKBOT_YOLOV5_MESSAGE_OBJECT_H
