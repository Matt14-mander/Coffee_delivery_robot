// Generated by gencpp from file xf_mic_asr_offline/Lidar_Angle.msg
// DO NOT EDIT!


#ifndef XF_MIC_ASR_OFFLINE_MESSAGE_LIDAR_ANGLE_H
#define XF_MIC_ASR_OFFLINE_MESSAGE_LIDAR_ANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xf_mic_asr_offline
{
template <class ContainerAllocator>
struct Lidar_Angle_
{
  typedef Lidar_Angle_<ContainerAllocator> Type;

  Lidar_Angle_()
    : start_angle(0)
    , end_angle(0)  {
    }
  Lidar_Angle_(const ContainerAllocator& _alloc)
    : start_angle(0)
    , end_angle(0)  {
  (void)_alloc;
    }



   typedef int16_t _start_angle_type;
  _start_angle_type start_angle;

   typedef int16_t _end_angle_type;
  _end_angle_type end_angle;





  typedef boost::shared_ptr< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> const> ConstPtr;

}; // struct Lidar_Angle_

typedef ::xf_mic_asr_offline::Lidar_Angle_<std::allocator<void> > Lidar_Angle;

typedef boost::shared_ptr< ::xf_mic_asr_offline::Lidar_Angle > Lidar_AnglePtr;
typedef boost::shared_ptr< ::xf_mic_asr_offline::Lidar_Angle const> Lidar_AngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator2> & rhs)
{
  return lhs.start_angle == rhs.start_angle &&
    lhs.end_angle == rhs.end_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator1> & lhs, const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xf_mic_asr_offline

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2684a80dd6dd0c664a3b5f39f5f7cc9e";
  }

  static const char* value(const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2684a80dd6dd0c66ULL;
  static const uint64_t static_value2 = 0x4a3b5f39f5f7cc9eULL;
};

template<class ContainerAllocator>
struct DataType< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xf_mic_asr_offline/Lidar_Angle";
  }

  static const char* value(const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 start_angle\n"
"int16 end_angle\n"
;
  }

  static const char* value(const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_angle);
      stream.next(m.end_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lidar_Angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xf_mic_asr_offline::Lidar_Angle_<ContainerAllocator>& v)
  {
    s << indent << "start_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.start_angle);
    s << indent << "end_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.end_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XF_MIC_ASR_OFFLINE_MESSAGE_LIDAR_ANGLE_H
