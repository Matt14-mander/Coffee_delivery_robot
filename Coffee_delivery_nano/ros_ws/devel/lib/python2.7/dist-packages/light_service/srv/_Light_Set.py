# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from light_service/Light_SetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Light_SetRequest(genpy.Message):
  _md5sum = "4d6e56e47207f4868318d90325077bb5"
  _type = "light_service/Light_SetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 客户端请求时发送的两个数字
int8 RGB_M_
int8 RGB_S_
uint8 RGB_T_
uint8 RGB_R_
uint8 RGB_G_
uint8 RGB_B_
"""
  __slots__ = ['RGB_M_','RGB_S_','RGB_T_','RGB_R_','RGB_G_','RGB_B_']
  _slot_types = ['int8','int8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RGB_M_,RGB_S_,RGB_T_,RGB_R_,RGB_G_,RGB_B_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Light_SetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.RGB_M_ is None:
        self.RGB_M_ = 0
      if self.RGB_S_ is None:
        self.RGB_S_ = 0
      if self.RGB_T_ is None:
        self.RGB_T_ = 0
      if self.RGB_R_ is None:
        self.RGB_R_ = 0
      if self.RGB_G_ is None:
        self.RGB_G_ = 0
      if self.RGB_B_ is None:
        self.RGB_B_ = 0
    else:
      self.RGB_M_ = 0
      self.RGB_S_ = 0
      self.RGB_T_ = 0
      self.RGB_R_ = 0
      self.RGB_G_ = 0
      self.RGB_B_ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b4B().pack(_x.RGB_M_, _x.RGB_S_, _x.RGB_T_, _x.RGB_R_, _x.RGB_G_, _x.RGB_B_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.RGB_M_, _x.RGB_S_, _x.RGB_T_, _x.RGB_R_, _x.RGB_G_, _x.RGB_B_,) = _get_struct_2b4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b4B().pack(_x.RGB_M_, _x.RGB_S_, _x.RGB_T_, _x.RGB_R_, _x.RGB_G_, _x.RGB_B_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.RGB_M_, _x.RGB_S_, _x.RGB_T_, _x.RGB_R_, _x.RGB_G_, _x.RGB_B_,) = _get_struct_2b4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b4B = None
def _get_struct_2b4B():
    global _struct_2b4B
    if _struct_2b4B is None:
        _struct_2b4B = struct.Struct("<2b4B")
    return _struct_2b4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from light_service/Light_SetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Light_SetResponse(genpy.Message):
  _md5sum = "c22f2a1ed8654a0b365f1bb3f7ff2c0f"
  _type = "light_service/Light_SetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 服务器响应发送的数据
string result
"""
  __slots__ = ['result']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Light_SetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = ''
    else:
      self.result = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class Light_Set(object):
  _type          = 'light_service/Light_Set'
  _md5sum = 'cfc723b899523d9fb55d7d41b0cedf61'
  _request_class  = Light_SetRequest
  _response_class = Light_SetResponse
